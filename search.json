[{"path":"https://torfason.github.io/fxconvert/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 fxconvert authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://torfason.github.io/fxconvert/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Magnus Thor Torfason. Author, maintainer.","code":""},{"path":"https://torfason.github.io/fxconvert/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Torfason M (2025). fxconvert: Simple Tidy Currency Conversion. R package version 0.3.0, https://github.com/torfason/fxconvert.","code":"@Manual{,   title = {fxconvert: Simple and Tidy Currency Conversion},   author = {Magnus Thor Torfason},   year = {2025},   note = {R package version 0.3.0},   url = {https://github.com/torfason/fxconvert}, }"},{"path":"https://torfason.github.io/fxconvert/index.html","id":"fxconvert","dir":"","previous_headings":"","what":"Simple and Tidy Currency Conversion","title":"Simple and Tidy Currency Conversion","text":"Convert currencies based rates obtained directly central banks open transparent way, without API dependencies registration requirements. Conversion fx_convert() fully vectorized amounts, currencies, dates, uses local data available, downloads --date rates GitHub repository parquet format needed.","code":""},{"path":"https://torfason.github.io/fxconvert/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simple and Tidy Currency Conversion","text":"can install development version fxconvert like :","code":"pak::pak(\"torfason/fxconvert\")"},{"path":"https://torfason.github.io/fxconvert/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Simple and Tidy Currency Conversion","text":"Use fx_get() quickly get exchange rates different currencies dates, use fx_convert() convert amounts directly currencies based exchange rates particular dates.","code":"# Load the package library(fxconvert)  # Initialize the local data store, downloading fx data from GitHub fx_init(verbose = FALSE)  # Retrieve specific exchange rates on specific dates fx_get(\"usd\", \"eur\", \"2020-01-03\") #> [1] 0.8971024  # The functions are fully vectorized fx_get(from   = c(\"usd\", \"eur\", \"gbp\"),        to     = c(\"eur\", \"gbp\", \"usd\"),        fxdate = \"2020-01-03\")  #> [1] 0.8971024 0.8511500 1.3096399  # Load dplyr for demonstrating use within a tibble manipulation pipe library(dplyr, include.only = c(\"tibble\", \"mutate\"))  # Use fx_convert() to convert amounts between currencies directly # This is useful when manipulating data frames d <- tibble(date = c(\"2020-01-03\", \"2024-05-06\"),              price_usd = c(999, 13.7)) d |>    mutate(price_eur = fx_convert(price_usd, \"usd\", \"eur\", date)) #> # A tibble: 2 × 3 #>   date       price_usd price_eur #>   <chr>          <dbl>     <dbl> #> 1 2020-01-03     999       896.  #> 2 2024-05-06      13.7      12.7"},{"path":"https://torfason.github.io/fxconvert/index.html","id":"vectorization-and-recycling","dir":"","previous_headings":"","what":"Vectorization and recycling","title":"Simple and Tidy Currency Conversion","text":"functions fully vectorized terms following parameters: (currency convert ) (currency convert ) fxdate (date exchange rate use) fx_convert() function also vectorized terms amount: amount (amount convert currencies) Recycling follows tidy recycling rules.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/assert_dots_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert that no dots arguments are passed — assert_dots_empty","title":"Assert that no dots arguments are passed — assert_dots_empty","text":"alias rlang::check_dots_empty(), consistency arguments. function throws error unnamed parameters passed function called.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/assert_dots_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert that no dots arguments are passed — assert_dots_empty","text":"","code":"assert_dots_empty(   env = caller_env(),   error = NULL,   call = caller_env(),   action = abort )"},{"path":"https://torfason.github.io/fxconvert/reference/assert_fxoptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that x is a valid fx_options object — assert_fxoptions","title":"Verify that x is a valid fx_options object — assert_fxoptions","text":"Verifies x fx_options object (class fxconvert_fx_options) elements object valid object. Use fx_options() create fx_options objects.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/assert_fxoptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that x is a valid fx_options object — assert_fxoptions","text":"","code":"assert_fxoptions(x)"},{"path":"https://torfason.github.io/fxconvert/reference/assert_fxoptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that x is a valid fx_options object — assert_fxoptions","text":"x object verify","code":""},{"path":"https://torfason.github.io/fxconvert/reference/assert_fxoptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify that x is a valid fx_options object — assert_fxoptions","text":"Unchanged input valid, otherwise error thrown.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/double_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an Object to a Double-Preserved Date — double_date","title":"Convert an Object to a Double-Preserved Date — double_date","text":"function converts object numeric double representation preserving \"Date\" class. first unclasses input, converts double, reassigns \"Date\" class.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/double_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an Object to a Double-Preserved Date — double_date","text":"","code":"double_date(x)"},{"path":"https://torfason.github.io/fxconvert/reference/double_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an Object to a Double-Preserved Date — double_date","text":"x object can coerced date-like numeric format.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/double_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an Object to a Double-Preserved Date — double_date","text":"Date object stored double.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/double_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an Object to a Double-Preserved Date — double_date","text":"Used ensure dates read using nanoparquet identical dates read file using arrow","code":""},{"path":"https://torfason.github.io/fxconvert/reference/double_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an Object to a Double-Preserved Date — double_date","text":"","code":"d <- 10957L   class(d) <- \"Date\" # d is now \"2000-01-01\"   double_date(d)  # Returns the same date but stored as a double #> [1] \"2000-01-01\""},{"path":"https://torfason.github.io/fxconvert/reference/fx_available_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Available Date Range for Foreign Exchange Data — fx_available_range","title":"Retrieve Available Date Range for Foreign Exchange Data — fx_available_range","text":"Determines range dates foreign exchange rate data available specified source. Currently, function supports retrieving data ranges local sources.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_available_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Available Date Range for Foreign Exchange Data — fx_available_range","text":"","code":"fx_available_range(bank = \"ecb\", where = c(\"local\", \"server\"))"},{"path":"https://torfason.github.io/fxconvert/reference/fx_available_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Available Date Range for Foreign Exchange Data — fx_available_range","text":"bank Character string specifying source exchange rate data. default source \"ecb\" (European Central Bank). Character vector indicating data location. default options \"local\" local data sources \"server\" remote servers. Currently, \"local\" implemented.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_available_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Available Date Range for Foreign Exchange Data — fx_available_range","text":"character vector two elements: first last dates \"YYYY-MM-DD\" format data available specified source.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_available_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Available Date Range for Foreign Exchange Data — fx_available_range","text":"","code":"#fx_available_range(bank = \"ecb\", where = \"local\")"},{"path":"https://torfason.github.io/fxconvert/reference/fx_date_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a sequence of dates — fx_date_seq","title":"Generate a sequence of dates — fx_date_seq","text":"Creates daily date sequence two dates, ensuring end date earlier start date.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_date_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a sequence of dates — fx_date_seq","text":"","code":"fx_date_seq(from_date, to_date)"},{"path":"https://torfason.github.io/fxconvert/reference/fx_date_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a sequence of dates — fx_date_seq","text":"from_date date character string \"YYYY-MM-DD\" format. to_date date character string \"YYYY-MM-DD\" format.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_date_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a sequence of dates — fx_date_seq","text":"sequence dates from_date to_date.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_date_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a sequence of dates — fx_date_seq","text":"","code":"fx_date_seq(\"2024-01-01\", \"2024-01-10\") #>  [1] \"2024-01-01\" \"2024-01-02\" \"2024-01-03\" \"2024-01-04\" \"2024-01-05\" #>  [6] \"2024-01-06\" \"2024-01-07\" \"2024-01-08\" \"2024-01-09\" \"2024-01-10\" fx_date_seq(as.Date(\"2023-06-01\"), as.Date(\"2023-06-05\")) #> [1] \"2023-06-01\" \"2023-06-02\" \"2023-06-03\" \"2023-06-04\" \"2023-06-05\""},{"path":"https://torfason.github.io/fxconvert/reference/fx_date_seq_lumpy.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a lumpy sequene of dates — fx_date_seq_lumpy","title":"Generate a lumpy sequene of dates — fx_date_seq_lumpy","text":"Generates \"lumpy\" sequence dates dates grouped individual components full years, full months, remaining days.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_date_seq_lumpy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a lumpy sequene of dates — fx_date_seq_lumpy","text":"","code":"fx_date_seq_lumpy(from_date, to_date, lump_decades = FALSE)"},{"path":"https://torfason.github.io/fxconvert/reference/fx_date_seq_lumpy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a lumpy sequene of dates — fx_date_seq_lumpy","text":"from_date date character string \"YYYY-MM-DD\" format. to_date date character string \"YYYY-MM-DD\" format. lump_decades decades lumped using 199X format?","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_date_seq_lumpy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a lumpy sequene of dates — fx_date_seq_lumpy","text":"character vector separated date ranges, sorted chronologically. vector contains strings representing full years (\"YYYY\"), full months (\"YYYY-MM\"), individual days (\"YYYY-MM-DD\") needed.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_date_seq_lumpy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a lumpy sequene of dates — fx_date_seq_lumpy","text":"","code":"fx_date_seq_lumpy(\"2022-11-30\", \"2024-02-01\") #> [1] \"2022-11-30\" \"2022-12\"    \"2023\"       \"2024-01\"    \"2024-02-01\""},{"path":"https://torfason.github.io/fxconvert/reference/fx_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve exchange rates or convert amounts between currencies — fx_convert","title":"Retrieve exchange rates or convert amounts between currencies — fx_convert","text":"functions used convert amounts one currency another, directly return exchange rates two specified currencies.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve exchange rates or convert amounts between currencies — fx_convert","text":"","code":"fx_convert(amount, from, to, fxdate, bank = \"ecb\", ..., .interpolate = FALSE)  fx_get(from, to, fxdate, bank = \"ecb\", ..., .interpolate = FALSE)"},{"path":"https://torfason.github.io/fxconvert/reference/fx_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve exchange rates or convert amounts between currencies — fx_convert","text":"amount Numeric; amount money convert currency currency. used fx_convert(). ISO currency code (character string) base currency. ISO currency code (character string) target currency. fxdate date retrieve exchange rates, \"YYYY-MM-DD\" format. bank character string specifying source exchange rate data. Default \"ecb\" (European Central Bank). ... Reserved .interpolate weekend date requested, previous days rate returned. false, weekend date result error.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve exchange rates or convert amounts between currencies — fx_convert","text":"fx_convert(), converted amount currency. fx_convert() relies directly exchange rates retrieved using fx_get(), simply multiplies amount rates fx_get() return. fx_get(), numeric value representing exchange rate currency currency specified fxdate. exchange rate betweenfrom , given way convert, one multiply exchange rate. means function may always give expected value well-known currency pairs always quoted direction.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_get_fxdata_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Local FX Data Directory — fx_get_fxdata_dir","title":"Get Local FX Data Directory — fx_get_fxdata_dir","text":"Returns path local directory storing FX data.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_get_fxdata_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Local FX Data Directory — fx_get_fxdata_dir","text":"","code":"fx_get_fxdata_dir(..., options = fx_options())"},{"path":"https://torfason.github.io/fxconvert/reference/fx_get_fxdata_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Local FX Data Directory — fx_get_fxdata_dir","text":"... Reserved. Options parameter must named options valid fx_options object.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_get_fxdata_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Local FX Data Directory — fx_get_fxdata_dir","text":"character string representing path local FX data directory.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_get_multibank.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch FX rates from multiple banks — fx_get_multibank","title":"Fetch FX rates from multiple banks — fx_get_multibank","text":"Retrieves exchange rates given currency pair date one data sources (ECB, CBI, Fed), returning either “wide” “long” tibble.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_get_multibank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch FX rates from multiple banks — fx_get_multibank","text":"","code":"fx_get_multibank(   from,   to,   fxdate,   bank = c(\"ecb\", \"cbi\", \"fed\"),   ...,   .interpolate = FALSE,   result_shape = c(\"wide\", \"long\") )"},{"path":"https://torfason.github.io/fxconvert/reference/fx_get_multibank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch FX rates from multiple banks — fx_get_multibank","text":"Base currency code (e.g., \"USD\"). Quote currency code (e.g., \"EUR\"). fxdate Date rate requested. bank Source bank (one c(\"ecb\", \"cbi\", \"fed\")). ... Additional arguments passed fx_get(). .interpolate Logical. TRUE, interpolate missing dates. result_shape \"wide\" (col per bank) \"long\" (row per bank).","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_get_multibank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch FX rates from multiple banks — fx_get_multibank","text":"tibble rates banks.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_get_single.html","id":null,"dir":"Reference","previous_headings":"","what":"This function connects to a DuckDB database containing foreign exchange rate data, retrieves exchange rates between two specified currencies for a given date, and calculates the exchange rate from the first specified currency to the second. — fx_get_single","title":"This function connects to a DuckDB database containing foreign exchange rate data, retrieves exchange rates between two specified currencies for a given date, and calculates the exchange rate from the first specified currency to the second. — fx_get_single","text":"function connects DuckDB database containing foreign exchange rate data, retrieves exchange rates two specified currencies given date, calculates exchange rate first specified currency second.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_get_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function connects to a DuckDB database containing foreign exchange rate data, retrieves exchange rates between two specified currencies for a given date, and calculates the exchange rate from the first specified currency to the second. — fx_get_single","text":"","code":"fx_get_single(from, to, fxdate, bank = \"ecb\", ..., .interpolate = FALSE)"},{"path":"https://torfason.github.io/fxconvert/reference/fx_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Foreign Exchange (FX) Data — fx_init","title":"Initialize Foreign Exchange (FX) Data — fx_init","text":"function initializes refreshes local foreign exchange (FX) data directory downloading necessary data files specified remote server. function allows different approaches data management, including incremental updates, full re-initialization, local refreshes.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Foreign Exchange (FX) Data — fx_init","text":"","code":"fx_init(   ...,   banks = c(\"ecb\", \"cbi\", \"fed\", \"xfed\"),   action = c(\"auto\", \"update\", \"offline\", \"full\", \"remove\"),   verbose = TRUE,   once = FALSE )"},{"path":"https://torfason.github.io/fxconvert/reference/fx_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Foreign Exchange (FX) Data — fx_init","text":"... Reserved. arguments must named. banks Character string specifying source FX data. Currently, \"ecb\", \"cbi\", \"fed\" supported. action String specifying initialization action take. One auto, update, offline, full, remove. See details. Replaces approach. verbose Logical indicating whether print progress messages. Defaults TRUE. Logical indicating whether perform actual initialization per R session. Defaults FALSE.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize Foreign Exchange (FX) Data — fx_init","text":"function ensures local FX data store date : Checking available data ranges remote server. Identifying missing data files download. Removing outdated local files. Loading data DuckDB database efficient querying. approach updating data determined approach parameter. can currently set four different options: \"incremental\": Downloads missing data keeping existing files. \"fresh\": Deletes local data downloads everything anew. \"local_refresh\": Rebuilds local database without downloading new data. \"remove\": Deletes local data exits without downloading new data. different approaches, actions, subject change. particular support offline use appropriate warnings. Potential actions: auto    (equivalent =TRUE, updates updated session (must ensure sitrep OK)) update  (equivalent older incremental, warns offline, error data) offline (avoid internet access, warn offline unless data missing) full    (remove update rolled one) remove  (deletes local data exits without downloading new data.) TODO: take options object also","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_lump_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a lumpy sequence of dates with a recursive approach — fx_lump_dates","title":"Generate a lumpy sequence of dates with a recursive approach — fx_lump_dates","text":"function lumps dates common eras, eras different length, ranging millennium decaday. decaday set days month common number tens-place (1-9, 10-19, 20-29, 30-31). Allowed lump eras : millennium, century, decade, year, month, decaday. calls non-exported function actual recursion, expensive input checking initial input.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_lump_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a lumpy sequence of dates with a recursive approach — fx_lump_dates","text":"","code":"fx_lump_dates(dates, lump_from = \"millennium\", lump_to = \"decaday\")"},{"path":"https://torfason.github.io/fxconvert/reference/fx_lump_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a lumpy sequence of dates with a recursive approach — fx_lump_dates","text":"dates Strictly increasing date sequence lump lump_from Largest era unit lump lump_to Smallest era unit lump","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_lump_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a lumpy sequence of dates with a recursive approach — fx_lump_dates","text":"character vector date ranges.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an fx_options Object — fx_options","title":"Create an fx_options Object — fx_options","text":"Constructs fx_options object configurable parameters. parameters can set defaults, ","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an fx_options Object — fx_options","text":"","code":"fx_options(   ...,   workspace = getOption(\"fxconvert.workspace\", \"main\"),   bank = getOption(\"fxconvert.bank\", \"ecb\"),   repo = getOption(\"fxconvert.repo\", \"torfason/fxdata\") )"},{"path":"https://torfason.github.io/fxconvert/reference/fx_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an fx_options Object — fx_options","text":"... Reserved. arguments must named. workspace character string specifying local workspace use operations. bank character string specifying central bank rates base conversions . repo character string specifying remote repository source exchange rate data.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an fx_options Object — fx_options","text":"list representing fx_options object.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_sitrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Print debug information about the exchange rate database — fx_sitrep","title":"Print debug information about the exchange rate database — fx_sitrep","text":"Provides status report exchange rate database, printing key information database file available data, including preview available dates consistency checks.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_sitrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print debug information about the exchange rate database — fx_sitrep","text":"","code":"fx_sitrep(bank = c(\"ecb\", \"cbi\", \"fed\", \"xfed\"), verbose = TRUE)"},{"path":"https://torfason.github.io/fxconvert/reference/fx_sitrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print debug information about the exchange rate database — fx_sitrep","text":"bank Character string specifying source exchange rate data. Defaults \"ecb\". Must match valid source. verbose output results (returning TRUE/FALSE)","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_sitrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print debug information about the exchange rate database — fx_sitrep","text":"TRUE looks well correctly initialized. FALSE database seem initialized. Throws error errors data structures.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_vec_fill_gaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill Missing Values Within Observed Data Range — fx_vec_fill_gaps","title":"Fill Missing Values Within Observed Data Range — fx_vec_fill_gaps","text":"Fills NA values vector within index range observed (non-missing) values, without extending beyond last non-missing value.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_vec_fill_gaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill Missing Values Within Observed Data Range — fx_vec_fill_gaps","text":"","code":"fx_vec_fill_gaps(   x,   direction = c(\"down\", \"up\", \"downup\", \"updown\"),   max_fill = NULL )"},{"path":"https://torfason.github.io/fxconvert/reference/fx_vec_fill_gaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill Missing Values Within Observed Data Range — fx_vec_fill_gaps","text":"x atomic vector containing NA values filled. direction string indicating fill direction. Must one : \"\" (default): Fill missing values downward. \"\": Fill missing values upward. \"downup\": Fill first , . \"updown\": Fill first , . max_fill single positive integer specifying maximum number sequential missing values filled. NULL, limit.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_vec_fill_gaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill Missing Values Within Observed Data Range — fx_vec_fill_gaps","text":"vector type x, missing values filled within index range observed (non-missing) values","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_vec_fill_gaps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill Missing Values Within Observed Data Range — fx_vec_fill_gaps","text":"function identifies first last non-missing values x fills missing values within index range. values beyond last non-missing value remain NA. function useful need fill missing values want avoid extending beyond known data points. Internally uses vctrs::vec_fill_missing() filling. \"downup\" \"updown\" approaches provided strictly compatibility vctrs::vec_fill_missing(). practice, result always exactly equal just using \"\" \"\", respectively.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_vec_fill_gaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill Missing Values Within Observed Data Range — fx_vec_fill_gaps","text":"","code":"x1 <- c(NA, NA, 1, NA, NA, 2, NA, NA) fx_vec_fill_gaps(x1) #> [1] NA NA  1  1  1  2 NA NA fx_vec_fill_gaps(x1, direction = \"up\") #> [1] NA NA  1  2  2  2 NA NA  x2 <- c(NA, NA, 1, NA, NA) fx_vec_fill_gaps(x2)  # Unchanged (single element means no gaps) #> [1] NA NA  1 NA NA  x3 <- c(NA, NA, NA, NA, NA) fx_vec_fill_gaps(x3)  # Unchanged (all NA) #> [1] NA NA NA NA NA"},{"path":"https://torfason.github.io/fxconvert/reference/fx_verify_data_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify and clean FX data versioning — fx_verify_data_version","title":"Verify and clean FX data versioning — fx_verify_data_version","text":"Checks .version. column FX dataset. Issues warning data unversioned contains multiple versions. Removes .version. column returning data.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_verify_data_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify and clean FX data versioning — fx_verify_data_version","text":"","code":"fx_verify_data_version(d)"},{"path":"https://torfason.github.io/fxconvert/reference/fx_verify_data_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify and clean FX data versioning — fx_verify_data_version","text":"d data frame .version. column.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/fx_verify_data_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify and clean FX data versioning — fx_verify_data_version","text":"input data frame .version. column removed.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/random_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a random date between two dates — random_date","title":"Generate a random date between two dates — random_date","text":"Returns single random date start_date end_date. seed provided, result reproducible.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/random_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a random date between two dates — random_date","text":"","code":"random_date(   n,   start_date = \"1970-01-01\",   end_date = Sys.Date(),   replace = FALSE,   seed = NULL )"},{"path":"https://torfason.github.io/fxconvert/reference/random_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a random date between two dates — random_date","text":"n Length result start_date Date string ymd() form. start date range. end_date Date string ymd() form. end date range. seed Optional integer. provided, sets random seed locally reproducibility.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/random_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a random date between two dates — random_date","text":"Date object length n.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/random_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a random date between two dates — random_date","text":"","code":"random_date(3, \"2000-01-01\", \"2020-12-31\") #> [1] \"2014-06-28\" \"2015-02-17\" \"2018-01-29\" random_date(5, as.Date(\"2000-01-01\"), as.Date(\"2020-12-31\"), seed = 42) #> [1] \"2007-02-21\" \"2011-02-20\" \"2006-06-26\" \"2014-06-08\" \"2003-01-02\""},{"path":"https://torfason.github.io/fxconvert/reference/read_parquet_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Combine Multiple Parquet Files Using nanoparquet — read_parquet_multi","title":"Read and Combine Multiple Parquet Files Using nanoparquet — read_parquet_multi","text":"Reads one Parquet files specified directories, glob patterns, file paths using nanoparquet::read_parquet(), combines single data frame using dplyr::bind_rows().","code":""},{"path":"https://torfason.github.io/fxconvert/reference/read_parquet_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Combine Multiple Parquet Files Using nanoparquet — read_parquet_multi","text":"","code":"read_parquet_multi(path, ..., add_file_column = FALSE)"},{"path":"https://torfason.github.io/fxconvert/reference/read_parquet_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Combine Multiple Parquet Files Using nanoparquet — read_parquet_multi","text":"path directory glob pattern ... Additional arguments passed nanoparquet::read_parquet().","code":""},{"path":"https://torfason.github.io/fxconvert/reference/read_parquet_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Combine Multiple Parquet Files Using nanoparquet — read_parquet_multi","text":"single data frame containing rows matched Parquet files. .file column added indicate source file row.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/read_parquet_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Combine Multiple Parquet Files Using nanoparquet — read_parquet_multi","text":"","code":"if (FALSE) { # \\dontrun{   df <- read_nanoparquet_multi(c(\"data/\", \"logs/*.parquet\")) } # }"},{"path":"https://torfason.github.io/fxconvert/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. lubridate today, ymd","code":""},{"path":"https://torfason.github.io/fxconvert/reference/write_parquet_vx.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes and verifies parquet file with maximum compression — write_parquet_vx","title":"Writes and verifies parquet file with maximum compression — write_parquet_vx","text":"maXimum compression, function writes length(compression_types) versions parquet file maximum compression options compression type temporary location, moving maximally compressed file target file. Verification, function checks target file exists, read verify contents equal x (mismatch error). target file exist, written (see ) TRUE returned , re-read ensure match (, mismatch error). function returns TRUE file written, FALSE matching file already exists.","code":""},{"path":"https://torfason.github.io/fxconvert/reference/write_parquet_vx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes and verifies parquet file with maximum compression — write_parquet_vx","text":"","code":"write_parquet_vx(   x,   file,   ...,   compression_types = c(\"gzip\", \"snappy\", \"uncompressed\"),   verbose = FALSE )"},{"path":"https://torfason.github.io/fxconvert/reference/write_parquet_vx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes and verifies parquet file with maximum compression — write_parquet_vx","text":"x tibble data write file. file string path name write. compression_types character list compression methods try. verbose flag determining verbosity level","code":""},{"path":"https://torfason.github.io/fxconvert/reference/write_parquet_vx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes and verifies parquet file with maximum compression — write_parquet_vx","text":"TRUE data written file, FALSE file existed contained exact data x (file different data found, error thrown).","code":""}]
